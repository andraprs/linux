/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 */

#ifndef _UAPI_LINUX_NITRO_ENCLAVES_H_
#define _UAPI_LINUX_NITRO_ENCLAVES_H_

#include <linux/types.h>

/* Nitro Enclaves (NE) Kernel Driver Interface */

#define NE_API_VERSION (1)

/**
 * The command is used to get the version of the NE API. This way the user space
 * processes can be aware of the feature sets provided by the NE kernel driver.
 *
 * The NE API version is returned as result of this ioctl call.
 */
#define NE_GET_API_VERSION _IO(0xAE, 0x20)

/**
 * The command is used to create a slot that is associated with an enclave VM.
 *
 * The generated unique slot id is a read parameter of this command. An enclave
 * file descriptor is returned as result of this ioctl call. The enclave fd can
 * be further used with ioctl calls to set vCPUs and memory regions, then start
 * the enclave.
 */
#define NE_CREATE_VM _IOR(0xAE, 0x21, __u64)

/**
 * The command is used to set a vCPU for an enclave. A CPU pool needs to be set
 * for enclave usage, before calling this function. CPU 0 and its siblings need
 * to remain available for the primary / parent VM, so they cannot be set for
 * an enclave.
 *
 * The vCPU id is a write / read parameter. If its value is 0, then a CPU is
 * chosen from the enclave CPU pool and returned via this parameter. A vCPU file
 * descriptor is returned as result of this ioctl call.
 */
#define NE_CREATE_VCPU _IOWR(0xAE, 0x22, __u32)

/**
 * The command is used to get information needed for in-memory enclave image
 * loading e.g. offset in enclave memory to start placing the enclave image.
 *
 * The image load info is a write / read parameter. It includes info provided
 * by the caller - flags - and returns the offset in enclave memory where to
 * start placing the enclave image.
 */
#define NE_GET_IMAGE_LOAD_INFO _IOWR(0xAE, 0x23, struct ne_image_load_info)

/**
 * The command is used to set a memory region for an enclave, given the
 * allocated memory from the userspace.
 *
 * The user memory region is a write parameter. It includes info provided
 * by the caller - flags, memory size and userspace address.
 */
#define NE_SET_USER_MEMORY_REGION _IOW(0xAE, 0x24, struct ne_user_memory_region)

/**
 * The command is used to trigger enclave start after the enclave resources,
 * such as memory and CPU, have been set.
 *
 * The enclave start info is a write / read parameter. It includes info provided
 * by the caller - enclave cid and flags - and returns the cid (if input cid is
 * 0).
 */
#define NE_START_ENCLAVE _IOWR(0xAE, 0x25, struct ne_enclave_start_info)

/* Image load info flags */

/* Enclave Image Format (EIF) */
#define NE_EIF_IMAGE (0x01)

/* Info necessary for in-memory enclave image loading (write / read). */
struct ne_image_load_info {
	/**
	 * Flags to determine the enclave image type (e.g. Enclave Image Format
	 * - EIF) (write).
	 */
	__u64 flags;

	/**
	 * Offset in enclave memory where to start placing the enclave image
	 * (read).
	 */
	__u64 memory_offset;
};

/* User memory region flags */

/* Memory region for enclave general usage. */
#define NE_DEFAULT_MEMORY_REGION (0x00)

/* Memory region to be set for an enclave (write). */
struct ne_user_memory_region {
	/**
	 * Flags to determine the usage for the memory region (write).
	 */
	__u64 flags;

	/**
	 * The size, in bytes, of the memory region to be set for an enclave
	 * (write).
	 */
	__u64 memory_size;

	/**
	 * The start of the userspace allocated memory of the memory region to
	 * set for an enclave (write).
	 */
	__u64 userspace_addr;
};

/* Enclave start info flags */

/* Start enclave in debug mode. */
#define NE_ENCLAVE_DEBUG_MODE (0x01)

/* Setup info necessary for enclave start (write / read). */
struct ne_enclave_start_info {
	/* Flags for the enclave to start with (e.g. debug mode) (write). */
	__u64 flags;

	/**
	 * Context ID (CID) for the enclave vsock device. If 0 as input, the
	 * CID is autogenerated by the hypervisor and returned back as output
	 * by the driver (write / read).
	 */
	__u64 enclave_cid;
};

#endif /* _UAPI_LINUX_NITRO_ENCLAVES_H_ */
