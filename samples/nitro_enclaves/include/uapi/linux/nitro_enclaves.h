/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _UAPI_LINUX_NITRO_ENCLAVES_H_
#define _UAPI_LINUX_NITRO_ENCLAVES_H_

#include <linux/kvm.h>
#include <linux/types.h>

/* Nitro Enclaves (NE) Kernel Driver Interface */

/**
 * The command is used to get information needed for in-memory enclave image
 * loading e.g. offset in enclave memory to start placing the enclave image.
 *
 * The image load metadata is an in / out data structure. It includes info
 * provided by the caller - flags - and returns the offset in enclave memory
 * where to start placing the enclave image.
 */
#define NE_GET_IMAGE_LOAD_METADATA _IOWR(0xAE, 0x20, struct image_load_metadata)

/**
 * The command is used to trigger enclave start after the enclave resources,
 * such as memory and CPU, have been set.
 *
 * The enclave start metadata is an in / out data structure. It includes info
 * provided by the caller - enclave cid and flags - and returns the slot uid
 * and the cid (if input cid is 0).
 */
#define NE_START_ENCLAVE _IOWR(0xAE, 0x21, struct enclave_start_metadata)

/* Metadata necessary for in-memory enclave image loading. */
struct image_load_metadata {
	/**
	 * Flags to determine the enclave image type e.g. Enclave Image Format
	 * (EIF) (in).
	 */
	__u64 flags;

	/**
	 * Offset in enclave memory where to start placing the enclave image
	 * (out).
	 */
	__u64 memory_offset;
};

/* Setup metadata necessary for enclave start. */
struct enclave_start_metadata {
	/* Flags for the enclave to start with (e.g. debug mode) (in). */
	__u64 flags;

	/**
	 * Context ID (CID) for the enclave vsock device. If 0 as input, the
	 * CID is autogenerated by the hypervisor and returned back as output
	 * by the driver (in/out).
	 */
	__u64 enclave_cid;

	/* Slot unique id mapped to the enclave to start (out). */
	__u64 slot_uid;
};

#endif /* _UAPI_LINUX_NITRO_ENCLAVES_H_ */
